#
# This software is supplied under the terms of the MIT License, a copy of which
# should be located in the distribution where this file was obtained
# (LICENSE.txt).  A copy of the license may also be found online at
# https://opensource.org/licenses/MIT.

cmake_minimum_required(VERSION 2.8.12)

project(nanomq)
SET(CMAKE_C_STANDARD 99)

if(DEBUG AND ASAN)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -fsanitize=address")
  # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fsanitize=address")
endif(DEBUG AND ASAN)

if(DEBUG AND TSAN)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -fsanitize=thread")
  # SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fsanitize=thread")
endif(DEBUG AND TSAN)

aux_source_directory(. DIRSRCS)

add_subdirectory(apps)

# set(PARALLEL 128 CACHE STRING "Parallelism (min 4, max 1000)")

set(SOURCES
    mqtt_api.c
    nanomq.c
    process.c
    bridge.c
    pub_handler.c
    sub_handler.c
    unsub_handler.c
    hashmap.c
    rest_api.c
    web_server.c
    webhook_inproc.c
    webhook_post.c
    aws_bridge.c
    nanomq_rule.c
    conf_api.c
    cmd_proc.c
    acl_handler.c
    )
    # db_cli.c)


if(BUILD_STATIC_LIB)
  add_library(nanomq  ${SOURCES})
elseif (BUILD_SHARED_LIBS) 
  add_library(nanomq SHARED ${SOURCES})
  set_property(TARGET nanomq PROPERTY POSITION_INDEPENDENT_CODE 1)
else()
  add_executable(nanomq ${SOURCES})
endif()

target_include_directories(nanomq PUBLIC
  $<BUILD_INTERFACE:${NANOMQ_SOURCE_DIR}>
  $<BUILD_INTERFACE:${NANOMQ_SOURCE_DIR}/nanomq/include>
  $<BUILD_INTERFACE:${NANOMQ_SOURCE_DIR}/nng/include/nng>
  $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  ${FOUNDATION_INCLUDE_DIR})

if(ENABLE_JWT)
  target_include_directories(nanomq PRIVATE ${NANOMQ_SOURCE_DIR}/extern/l8w8jwt/include)
endif(ENABLE_JWT)

if(ENABLE_RULE_ENGINE)
  target_link_libraries(nanomq ${FOUNDATION_LIBRARY})

  include(FindPkgConfig)
  pkg_check_modules(LIBMYSQLCLIENT REQUIRED mysqlclient)

  foreach(FLAG ${LIBMYSQLCLIENT_CFLAGS_OTHER})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FLAG}")
  endforeach()

  link_directories(${LIBMYSQLCLIENT_LIBRARY_DIRS})
  target_include_directories(nanomq PRIVATE ${MYSQL_INCLUDE_DIR})
  target_include_directories(nanomq PRIVATE ${LIBMYSQLCLIENT_INCLUDE_DIRS})
  # message(STATUS, "${LIBMYSQLCLIENT_INCLUDE_DIRS}")
  target_link_libraries(nanomq ${LIBMYSQLCLIENT_LIBRARIES})

endif(ENABLE_RULE_ENGINE)

if(ENABLE_AWS_BRIDGE)
  target_link_libraries(nanomq
      aws_iot_mqtt
      aws_iot_backoff_algorithm
      sockets_posix
      openssl_posix
      clock_posix)

endif(ENABLE_AWS_BRIDGE)

# target_link_libraries(nanomq apps nano_shared)
if(ENABLE_JWT)
  target_link_libraries(nanomq l8w8jwt)
endif(ENABLE_JWT)

if(NNG_ENABLE_QUIC)
  target_link_libraries(nanomq msquic OpenSSLQuic)
endif(NNG_ENABLE_QUIC)

target_link_libraries(nanomq apps nng)

if(BUILD_QUIC_CLI)
  target_link_libraries(nanomq apps nng msquic)
endif(BUILD_QUIC_CLI)

target_link_libraries(nanomq nng)

target_compile_definitions(nanomq PRIVATE -DPARALLEL=${PARALLEL})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
# Package all static files into one libnanomq.a
if(BUILD_STATIC_LIB)
  set(FULL_OUTPUT_PATH ${CMAKE_BINARY_DIR}/libnanomq.a)
  set (tmp ${CMAKE_BINARY_DIR}/tmp)
  file(WRITE ${tmp} "create ${FULL_OUTPUT_PATH}\n")
  file(APPEND ${tmp} "addlib ${CMAKE_BINARY_DIR}/nanomq/libnanomq.a\n")
  file(APPEND ${tmp} "addlib ${CMAKE_BINARY_DIR}/nng/libnng.a\n")
  file(APPEND ${tmp} "addlib ${CMAKE_BINARY_DIR}/nanomq/apps/libapps.a\n")
  file(APPEND ${tmp} "save\n")
  file(APPEND ${tmp} "end\n")

  add_custom_target(libnano
          COMMAND ar -M < ${CMAKE_BINARY_DIR}/tmp
          COMMAND rm ${CMAKE_BINARY_DIR}/tmp
          COMMAND rm ${CMAKE_BINARY_DIR}/nanomq/libnanomq.a
          WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
          DEPENDS apps nanomq nng
          )
endif(BUILD_STATIC_LIB)

# TODO INSTALL

if(BUILD_STATIC_LIB OR BUILD_SHARED_LIBS)
  # install(
  #   FILES ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/libnanomq.a
  #   LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR})

else()
  install(
    TARGETS nanomq
    EXPORT nanomqConfig
    # ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
    # LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT services)

  install(
    DIRECTORY include/
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}
    COMPONENT services)

  install(
    EXPORT nanomqConfig
    DESTINATION share/nanomq/cmake
    COMPONENT services)

endif()

nanomq_test(sub_handler_test)
nanomq_test(unsub_handler_test)
nanomq_test(pub_handler_test)